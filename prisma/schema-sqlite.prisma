generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  activities       Activity[]
  focusSessions    FocusSession[]
  learningSessions LearningSession[]
  cognitiveStates  CognitiveState[]
  knowledgeNodes   KnowledgeNode[]
  settings         UserSettings?
}

model UserSettings {
  id                    String  @id @default(cuid())
  userId                String  @unique
  pomodoroWorkDuration  Int     @default(25)
  pomodoroBreakDuration Int     @default(5)
  pomodoroLongBreak     Int     @default(15)
  dailyGoal             Int     @default(4)
  notifications         Boolean @default(true)
  soundEnabled          Boolean @default(true)
  theme                 String  @default("system")
  
  cognitiveDetectionEnabled Boolean @default(true)
  adaptiveContentEnabled    Boolean @default(true)
  knowledgeMappingEnabled   Boolean @default(true)
  
  adaptationIntensity       String  @default("medium")
  highlightKeywords         Boolean @default(true)
  simplifyComplexContent    Boolean @default(true)
  enhanceVisualCues         Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Activity {
  id             String   @id @default(cuid())
  userId         String
  url            String
  title          String
  domain         String
  timeSpent      Int
  mouseMovements Int      @default(0)
  keystrokes     Int      @default(0)
  scrollEvents   Int      @default(0)
  tabSwitches    Int      @default(0)
  activityLevel  String   @default("medium")
  focusScore     Int      @default(50)
  sessionId      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CognitiveState {
  id            String   @id @default(cuid())
  userId        String
  state         String
  confidence    Float    @default(0.5)
  duration      Int
  triggers      String?
  sessionId     String?
  activityId    String?
  timestamp     DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FocusSession {
  id          String   @id @default(cuid())
  userId      String
  sessionId   String   @unique
  type        String   @default("pomodoro")
  duration    Int
  actualTime  Int?
  completed   Boolean  @default(false)
  interrupted Boolean  @default(false)
  notes       String?
  productivity Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LearningSession {
  id              String   @id @default(cuid())
  userId          String
  sessionId       String   @unique
  subject         String?
  goals           String?
  startTime       DateTime @default(now())
  endTime         DateTime?
  totalDuration   Int?
  conceptsLearned Int      @default(0)
  avgFocusScore   Float?
  completed       Boolean  @default(false)
  insights        String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model KnowledgeNode {
  id          String   @id @default(cuid())
  userId      String
  concept     String
  description String?
  domain      String?
  frequency   Int      @default(1)
  lastSeen    DateTime @default(now())
  confidence  Float    @default(0.5)
  source      String?
  connections String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
