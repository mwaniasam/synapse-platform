interface GrokAIMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

export class MockGrokAIClient {
  private isProduction: boolean;

  constructor() {
    this.isProduction = process.env.NODE_ENV === 'production';
  }

  private getMockResponse(messages: GrokAIMessage[]): string {
    const lastMessage = messages[messages.length - 1]?.content.toLowerCase() || '';
    
    if (lastMessage.includes('hello') || lastMessage.includes('hi')) {
      return "Hello! I'm your AI assistant. (Mock Response)";
    }
    
    if (lastMessage.includes('summarize')) {
      return "This is a mock summary of your content. In a real implementation, this would be generated by the Grok AI. (Mock Response)";
    }
    
    if (lastMessage.includes('?')) {
      return "This is a mock response to your question. In a real implementation, the Grok AI would provide a detailed answer. (Mock Response)";
    }
    
    return "I'm your AI assistant. How can I help you today? (Mock Response)";
  }

  async chat(messages: GrokAIMessage[]): Promise<string> {
    return new Promise((resolve) => {
      // Simulate network delay
      setTimeout(() => {
        resolve(this.getMockResponse(messages));
      }, 300);
    });
  }

  async answerQuestion(question: string, context: string): Promise<string> {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(`Based on the context: ${context.substring(0, 100)}...\n\nAnswer: This is a mock response to your question about "${question}" (Mock Response)`);
      }, 300);
    });
  }

  async summarizeContent(content: string): Promise<string> {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(`Summary: This is a mock summary of your content. Original content was ${content.length} characters long. (Mock Response)`);
      }, 300);
    });
  }
}

export const mockGrokClient = new MockGrokAIClient();
