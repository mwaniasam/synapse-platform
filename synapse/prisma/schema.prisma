generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Synapse-specific fields
  preferences   UserPreferences?
  learningSessions LearningSession[]
  cognitiveStates  CognitiveState[]
  knowledgeNodes   KnowledgeNode[]
  aiInteractions   AIInteraction[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserPreferences {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Cognitive detection settings
  enableCognitiveDetection Boolean @default(true)
  detectionSensitivity     Float   @default(0.5)
  
  // Content adaptation settings
  enableContentAdaptation Boolean @default(true)
  adaptationIntensity     Float   @default(0.5)
  
  // Knowledge mapping settings
  enableKnowledgeMapping Boolean @default(true)
  
  // UI preferences
  theme                  String  @default("light")
  dashboardLayout        String  @default("default")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LearningSession {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title       String
  description String?
  subject     String?
  goals       String[] @default([])
  
  startTime   DateTime
  endTime     DateTime?
  duration    Int?     // in seconds
  
  // Session metrics
  focusScore       Float?
  conceptsLearned  Int    @default(0)
  adaptationsUsed  Int    @default(0)
  
  cognitiveStates CognitiveState[]
  knowledgeNodes  KnowledgeNode[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CognitiveState {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId String?
  session   LearningSession? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  state      String   // focused, fatigued, distracted, receptive
  confidence Float    // 0.0 to 1.0
  timestamp  DateTime @default(now())
  
  // Interaction data that led to this state
  typingSpeed     Float?
  mouseMovements  Int?
  tabSwitches     Int?
  scrollBehavior  String?
  
  createdAt DateTime @default(now())
}

model KnowledgeNode {
  id        String @id @default(cuid())
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId String?
  session   LearningSession? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  concept     String
  description String?
  domain      String?
  url         String? // Source URL where concept was found
  
  // Relationships
  relatedNodes KnowledgeRelation[] @relation("FromNode")
  relatedTo    KnowledgeRelation[] @relation("ToNode")
  
  // Metrics
  encounterCount Int      @default(1)
  lastEncounter  DateTime @default(now())
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model KnowledgeRelation {
  id           String @id @default(cuid())
  fromNodeId   String
  toNodeId     String
  fromNode     KnowledgeNode @relation("FromNode", fields: [fromNodeId], references: [id], onDelete: Cascade)
  toNode       KnowledgeNode @relation("ToNode", fields: [toNodeId], references: [id], onDelete: Cascade)
  
  relationshipType String // "related", "prerequisite", "example", etc.
  strength         Float  @default(1.0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([fromNodeId, toNodeId])
}

model AIInteraction {
  id        String @id @default(cuid())
  userId    String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type      String   // "summary", "qa", "recommendation"
  query     String
  response  String
  context   String?  // Additional context about the interaction
  
  // Feedback
  helpful   Boolean?
  rating    Int?     // 1-5 scale
  
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
